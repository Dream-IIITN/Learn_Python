class Solution {
public:
bool ispal(string s){
    for(int i=0;i<s.size();i++){
        if(s[i]!=s[s.size()-i])
        return false;
    }
    return true;
}
    string nearestPalindromic(string n) {
        int x=stoi(n);
        bool f=false;
        string t= x-1+'0';
        string y=x+1+'0';
        int i=1;
        while(ispal(t)&& ispal(y)){
            t= x-i+'0';
        y=x+i+'0';
            if(ispal(t)){
                int d1=abs(stoi(t)-stoi(x));
            }
            if(ispal(y)){
                int d2=abs(stoi(y)-stoi(x));
            }
            i++;
        }
         if(d1<=d2)
            return t;
            else
            return y;
    }
};

//my corrected code with TLE:

#include <string>
#include <cmath>
#include <algorithm>

class Solution {
public:
    // Helper function to check if a string is a palindrome
    bool ispal(const std::string& s) {
        int len = s.size();
        for (int i = 0; i < len / 2; ++i) {
            if (s[i] != s[len - i - 1]) {
                return false;
            }
        }
        return true;
    }

    // Function to find the nearest palindromic number
    std::string nearestPalindromic(std::string n) {
        long long x = std::stoll(n);
        long long i = 1;
        long long d1 = LLONG_MAX, d2 = LLONG_MAX;
        std::string t, y;

        while (true) {
            t = std::to_string(x - i);
            y = std::to_string(x + i);
            
            if (ispal(t)) {
                d1 = std::abs(x - (x - i));
            }
            if (ispal(y)) {
                d2 = std::abs(x - (x + i));
            }

            if (ispal(t) || ispal(y)) break;  // Exit loop when at least one palindrome is found
            i++;
        }

        if (d1 <= d2) {
            return t;
        } else {
            return y;
        }
    }
};
//O(n) soln
class Solution {
public:
    string nearestPalindromic(string n) {
        int length = n.size();
        set<string> candidates;

        // Edge cases
        if (n == "1") return "0";

        // Create the prefix
        string prefix = n.substr(0, (length + 1) / 2);
        long long prefixNumber = stoll(prefix);

        // Generate candidates
        for (long long i : {-1, 0, 1}) {
            string newPrefix = to_string(prefixNumber + i);
            string candidate;
            if (length % 2 == 0) {
                candidate = newPrefix + string(newPrefix.rbegin(), newPrefix.rend());
            } else {
                candidate = newPrefix + string(newPrefix.rbegin() + 1, newPrefix.rend());
            }
            candidates.insert(candidate);
        }

        // Edge cases for smallest and largest palindromes
        candidates.insert(to_string(static_cast<long long>(pow(10, length - 1)) - 1));
        candidates.insert(to_string(static_cast<long long>(pow(10, length)) + 1));

        // Remove the original number from candidates
        candidates.erase(n);

        // Find the closest palindrome
        string closestPalindrome;
        long long minDifference = LLONG_MAX;
        long long num = stoll(n);
        for (const string& candidate : candidates) {
            long long candidateNum = stoll(candidate);
            long long difference = abs(candidateNum - num);
            if (difference < minDifference || (difference == minDifference && candidateNum < stoll(closestPalindrome))) {
                minDifference = difference;
                closestPalindrome = candidate;
            }
        }

        return closestPalindrome;
    }
};
